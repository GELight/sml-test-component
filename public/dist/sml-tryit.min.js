
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var sml_tryit = (function () {
    'use strict';

    function noop() { }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }
    function attribute_to_object(attributes) {
        const result = {};
        for (const attribute of attributes) {
            result[attribute.name] = attribute.value;
        }
        return result;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    let SvelteElement;
    if (typeof HTMLElement === 'function') {
        SvelteElement = class extends HTMLElement {
            constructor() {
                super();
                this.attachShadow({ mode: 'open' });
            }
            connectedCallback() {
                // @ts-ignore todo: improve typings
                for (const key in this.$$.slotted) {
                    // @ts-ignore todo: improve typings
                    this.appendChild(this.$$.slotted[key]);
                }
            }
            attributeChangedCallback(attr, _oldValue, newValue) {
                this[attr] = newValue;
            }
            $destroy() {
                destroy_component(this, 1);
                this.$destroy = noop;
            }
            $on(type, callback) {
                // TODO should this delegate to addEventListener?
                const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
                callbacks.push(callback);
                return () => {
                    const index = callbacks.indexOf(callback);
                    if (index !== -1)
                        callbacks.splice(index, 1);
                };
            }
            $set($$props) {
                if (this.$$set && !is_empty($$props)) {
                    this.$$.skip_bound = true;
                    this.$$set($$props);
                    this.$$.skip_bound = false;
                }
            }
        };
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.31.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var ReliableTxtDocument_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    class ReliableTxtDocument {
        constructor(...args) {
            this.text = "";
            this.text = args.join("\n");
            return this;
        }
        getLines() {
            return this.text.split("\n");
        }
        toString() {
            return this.text;
        }
    }
    exports.default = ReliableTxtDocument;

    });

    var WsvSerializer_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    class WsvSerializer {
        constructor() {
            // ...
        }
        serializeLine(items) {
            const serializedValues = [];
            for (const item of items) {
                serializedValues.push(this.serialize(item));
            }
            return serializedValues.join(" ");
        }
        serialize(str) {
            if (str === null) {
                return "-";
            }
            else if (str === "") {
                return '""';
            }
            else if (str === "-") {
                return '"-"';
            }
            else if (!this.containsSpecialChars(str)) {
                return str;
            }
            let result = "";
            for (const c of str) {
                switch (c) {
                    case "\n":
                        result += '"/"';
                        break;
                    case '"':
                        result += '""';
                        break;
                    default:
                        result += c;
                }
            }
            return `"${result}"`;
        }
        containsSpecialChars(str) {
            const lineBreaksInString = (str.match(/\n/g) || []).length;
            const doubleQuoteInString = str.includes('"');
            const spaceInString = /\s/.test(str);
            const commentInString = str.includes("#");
            if (lineBreaksInString || doubleQuoteInString || spaceInString || commentInString) {
                return true;
            }
            return false;
        }
    }
    exports.default = WsvSerializer;

    });

    var WsvLine_1 = createCommonjsModule(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    const WsvSerializer_1$1 = __importDefault(WsvSerializer_1);
    class WsvLine {
        constructor(...args) {
            this.values = [];
            for (const arg of args) {
                this.addValue(arg);
            }
            return this;
        }
        addValue(value) {
            this.values.push(value);
        }
        getValues() {
            return this.values;
        }
        toString() {
            return new WsvSerializer_1$1.default().serializeLine(this.getValues());
        }
    }
    exports.default = WsvLine;

    });

    var StringBuilder_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    class StringBuilder {
        constructor() {
            // ...
        }
        clear() {
            this.codePoints = [];
        }
        toString() {
            const chars = this.codePoints.map((codePoint) => {
                return String.fromCodePoint(codePoint);
            });
            return chars.join("");
        }
        appendCodePoint(codePoint) {
            this.codePoints.push(codePoint);
        }
        append(str) {
            this.codePoints.push(str.codePointAt(0));
        }
    }
    exports.default = StringBuilder;

    });

    var WsvChar_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    class WsvChar {
        constructor() {
            // ...
        }
        isWhitespace(c) {
            return (c >= 0x09 && c <= 0x0D) ||
                c === 0x20 ||
                c === 0x85 ||
                c === 0xA0 ||
                c === 0x1680 ||
                (c >= 0x2000 && c <= 0x200A) ||
                (c >= 0x2028 && c <= 0x2029) ||
                c === 0x202F ||
                c === 0x205F ||
                c === 0x3000;
        }
    }
    exports.default = WsvChar;

    });

    var WsvParserException_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    class WsvParserException extends Error {
        constructor(message, lineIndex, linePosition, ...params) {
            super(...params);
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, WsvParserException);
            }
            this.name = "WsvParserException";
            this.message = `${message}:${lineIndex + 1}:${linePosition}`;
            if (lineIndex) {
                this.lineIndex = lineIndex;
            }
            if (linePosition) {
                this.linePosition = linePosition;
            }
        }
    }
    exports.default = WsvParserException;

    });

    var WsvParserCharIterator_1 = createCommonjsModule(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    const WsvChar_1$1 = __importDefault(WsvChar_1);
    const WsvParserException_1$1 = __importDefault(WsvParserException_1);
    class WsvParserCharIterator {
        constructor(str, lineIndex) {
            this.index = 0;
            this.lineIndex = 0;
            this.chars = Array.from(str).map((v) => v.codePointAt(0));
            this.lineIndex = lineIndex;
        }
        isEnd() {
            return this.index >= this.chars.length;
        }
        is(c) {
            return this.chars[this.index] === c.codePointAt(0);
        }
        isWhitespace() {
            return new WsvChar_1$1.default().isWhitespace(this.chars[this.index]);
        }
        next() {
            this.index++;
            return !this.isEnd();
        }
        get() {
            return this.chars[this.index];
        }
        getByIndex(index) {
            const len = this.index - index;
            const chars = this.chars.map((c) => {
                return String.fromCodePoint(c);
            }).join("");
            return `${chars.substr(index, len)}`;
        }
        getIndex() {
            return this.index;
        }
        getException(message) {
            return new WsvParserException_1$1.default(message, this.lineIndex, this.index);
        }
    }
    exports.default = WsvParserCharIterator;

    });

    var WsvParser_1 = createCommonjsModule(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    const StringBuilder_1$1 = __importDefault(StringBuilder_1);
    const WsvParserCharIterator_1$1 = __importDefault(WsvParserCharIterator_1);
    class WsvParser {
        constructor() {
            this.result = [];
            // ...
        }
        parseDocument(content) {
            this.lines = content.split("\n");
            this.result = [];
            for (const line of this.lines) {
                const lineIndex = this.lines.indexOf(line);
                this.result.push(this.parseLine(line, lineIndex));
            }
            return this.result;
        }
        parseLine(str, lineIndex) {
            const iterator = new WsvParserCharIterator_1$1.default(str, lineIndex);
            const values = [];
            const sb = new StringBuilder_1$1.default();
            while (true) {
                this.skipWhitespace(iterator);
                if (iterator.isEnd()) {
                    break;
                }
                if (iterator.is("#")) {
                    break;
                }
                let curValue = "";
                if (iterator.is('"')) {
                    curValue = this.parseDoubleQuoteValue(iterator, sb);
                }
                else {
                    curValue = this.parseValue(iterator);
                    if (curValue === "-") {
                        curValue = null;
                    }
                }
                values.push(curValue);
            }
            return [...values];
        }
        parseDoubleQuoteValue(iterator, sb) {
            sb.clear();
            while (true) {
                if (!iterator.next()) {
                    throw iterator.getException("String not closed");
                }
                if (iterator.is('"')) {
                    if (!iterator.next()) {
                        break;
                    }
                    if (iterator.is('"')) {
                        sb.append('"');
                    }
                    else if (iterator.is("/")) {
                        if (!(iterator.next() && iterator.is('"'))) {
                            throw iterator.getException("Invalid line break");
                        }
                        sb.append("\n");
                    }
                    else if (iterator.isWhitespace() || iterator.is("#")) {
                        break;
                    }
                    else {
                        throw iterator.getException("Invalid character after string");
                    }
                }
                else {
                    sb.appendCodePoint(iterator.get());
                }
            }
            return sb.toString();
        }
        parseValue(iterator) {
            const startIndex = iterator.getIndex();
            while (true) {
                if (!iterator.next()) {
                    break;
                }
                if (iterator.isWhitespace() || iterator.is("#")) {
                    break;
                }
                else if (iterator.is('"')) {
                    throw new Error("Invalid double quote");
                }
            }
            return iterator.getByIndex(startIndex);
        }
        skipWhitespace(iterator) {
            if (iterator.isEnd()) {
                return;
            }
            do {
                if (!iterator.isWhitespace()) {
                    break;
                }
            } while (iterator.next());
        }
    }
    exports.default = WsvParser;

    });

    var WsvDocument_1 = createCommonjsModule(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    const WsvLine_1$1 = __importDefault(WsvLine_1);
    const WsvParser_1$1 = __importDefault(WsvParser_1);
    const WsvSerializer_1$1 = __importDefault(WsvSerializer_1);
    class WsvDocument {
        constructor(...args) {
            this.lines = [];
            for (const lineStr of args) {
                const lines = new WsvParser_1$1.default().parseDocument(lineStr);
                const firstLine = lines[0];
                const newLine = new WsvLine_1$1.default(...firstLine);
                this.lines.push(newLine);
            }
            return this;
        }
        addLine(...args) {
            for (const arg of args) {
                this.lines.push(arg);
            }
            return this.getLines();
        }
        addLineByValues(...args) {
            const line = new WsvLine_1$1.default();
            for (const arg of args) {
                line.addValue(arg);
            }
            this.lines.push(line);
            return this.getLines();
        }
        getLines() {
            return this.lines;
        }
        toString() {
            const serializedValues = [];
            for (const item of this.getLines()) {
                serializedValues.push(new WsvSerializer_1$1.default().serializeLine(item.getValues()));
            }
            return serializedValues.join("\n");
        }
        parse(content) {
            const lines = new WsvParser_1$1.default().parseDocument(content);
            for (const line of lines) {
                const newLine = new WsvLine_1$1.default(...line);
                this.lines.push(newLine);
            }
            return this.getLines();
        }
    }
    exports.default = WsvDocument;

    });

    var dist = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    Object.defineProperty(exports, "ReliableTxtDocument", { enumerable: true, get: function () { return ReliableTxtDocument_1.default; } });
    // export { default as ReliableTxtDocumentServer } from "./sml/ReliableTxtDocumentServer";
    // export { default as ReliableTxtEncoding } from "./sml/ReliableTxtEncoding";
    // export { default as ReliableTxtFile } from "./sml/ReliableTxtFile";

    Object.defineProperty(exports, "WsvDocument", { enumerable: true, get: function () { return WsvDocument_1.default; } });
    // export { default as WsvDocumentServer } from "./sml/WsvDocumentServer";

    Object.defineProperty(exports, "WsvLine", { enumerable: true, get: function () { return WsvLine_1.default; } });

    Object.defineProperty(exports, "WsvParser", { enumerable: true, get: function () { return WsvParser_1.default; } });

    Object.defineProperty(exports, "WsvSerializer", { enumerable: true, get: function () { return WsvSerializer_1.default; } });

    });

    /* src/App.svelte generated by Svelte v3.31.0 */
    const file = "src/App.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    // (49:2) {#each tabs as tab}
    function create_each_block_2(ctx) {
    	let label;
    	let input;
    	let input_value_value;
    	let t0;
    	let div;
    	let t1_value = /*tab*/ ctx[16] + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			t0 = space();
    			div = element("div");
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(input, "type", "radio");
    			input.__value = input_value_value = /*tab*/ ctx[16];
    			input.value = input.__value;
    			/*$$binding_groups*/ ctx[9][0].push(input);
    			add_location(input, file, 50, 4, 1271);
    			attr_dev(div, "class", "tab");
    			add_location(div, file, 51, 4, 1333);
    			add_location(label, file, 49, 3, 1259);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			input.checked = input.__value === /*selectedTab*/ ctx[1];
    			append_dev(label, t0);
    			append_dev(label, div);
    			append_dev(div, t1);
    			append_dev(label, t2);

    			if (!mounted) {
    				dispose = listen_dev(input, "change", /*input_change_handler*/ ctx[8]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedTab*/ 2) {
    				input.checked = input.__value === /*selectedTab*/ ctx[1];
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			/*$$binding_groups*/ ctx[9][0].splice(/*$$binding_groups*/ ctx[9][0].indexOf(input), 1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(49:2) {#each tabs as tab}",
    		ctx
    	});

    	return block;
    }

    // (57:2) {#if doc.length}
    function create_if_block(ctx) {
    	let table;
    	let each_value = /*doc*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			table = element("table");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(table, file, 57, 3, 1446);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(table, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*doc, getClass*/ 36) {
    				each_value = /*doc*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(table, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(57:2) {#if doc.length}",
    		ctx
    	});

    	return block;
    }

    // (61:6) {#each line as value}
    function create_each_block_1(ctx) {
    	let td;
    	let t_value = /*value*/ ctx[13] + "";
    	let t;
    	let td_class_value;

    	const block = {
    		c: function create() {
    			td = element("td");
    			t = text(t_value);
    			attr_dev(td, "class", td_class_value = /*getClass*/ ctx[5](/*value*/ ctx[13]));
    			add_location(td, file, 61, 7, 1523);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    			append_dev(td, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*doc*/ 4 && t_value !== (t_value = /*value*/ ctx[13] + "")) set_data_dev(t, t_value);

    			if (dirty & /*doc*/ 4 && td_class_value !== (td_class_value = /*getClass*/ ctx[5](/*value*/ ctx[13]))) {
    				attr_dev(td, "class", td_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(61:6) {#each line as value}",
    		ctx
    	});

    	return block;
    }

    // (59:4) {#each doc as line}
    function create_each_block(ctx) {
    	let tr;
    	let t;
    	let each_value_1 = /*line*/ ctx[10];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			add_location(tr, file, 59, 5, 1483);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tr, null);
    			}

    			append_dev(tr, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*getClass, doc*/ 36) {
    				each_value_1 = /*line*/ ctx[10];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr, t);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(59:4) {#each doc as line}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let div2;
    	let textarea;
    	let textarea_class_value;
    	let t0;
    	let div0;
    	let t1;
    	let div1;
    	let mounted;
    	let dispose;
    	let each_value_2 = /*tabs*/ ctx[4];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let if_block = /*doc*/ ctx[2].length && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			textarea = element("textarea");
    			t0 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			div1 = element("div");
    			if (if_block) if_block.c();
    			this.c = noop;
    			attr_dev(textarea, "class", textarea_class_value = /*parserError*/ ctx[3] ? "parserError" : "");
    			add_location(textarea, file, 46, 1, 1098);
    			attr_dev(div0, "class", "tab-group");
    			add_location(div0, file, 47, 1, 1210);
    			attr_dev(div1, "class", "sml-tryit-output");
    			add_location(div1, file, 55, 1, 1393);
    			attr_dev(div2, "class", "sml-tryit");
    			add_location(div2, file, 45, 0, 1073);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, textarea);
    			set_input_value(textarea, /*content*/ ctx[0]);
    			append_dev(div2, t0);
    			append_dev(div2, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			if (if_block) if_block.m(div1, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(textarea, "keydown", /*keydown*/ ctx[6], false, false, false),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[7])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*parserError*/ 8 && textarea_class_value !== (textarea_class_value = /*parserError*/ ctx[3] ? "parserError" : "")) {
    				attr_dev(textarea, "class", textarea_class_value);
    			}

    			if (dirty & /*content*/ 1) {
    				set_input_value(textarea, /*content*/ ctx[0]);
    			}

    			if (dirty & /*tabs, selectedTab*/ 18) {
    				each_value_2 = /*tabs*/ ctx[4];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}

    			if (/*doc*/ ctx[2].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("sml-tryit", slots, []);
    	let content = `Hello "in the World" of SML`;
    	let doc = [];
    	let tabs = ["ReliableTxtDocument", "WsvParser"];
    	let selectedTab = "WsvParser";
    	let parserError = false;

    	const getClass = value => {
    		if (!value) return "null";
    		if (value === " ") return "empty";
    		return "";
    	};

    	const keydown = e => {
    		if (e.key === "Tab") {
    			e.preventDefault();
    			var start = e.target.selectionStart;
    			var end = e.target.selectionEnd;
    			e.target.value = e.target.value.substring(0, start) + "\t" + e.target.value.substring(end);
    			e.target.selectionStart = e.target.selectionEnd = start + 1;
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<sml-tryit> was created with unknown prop '${key}'`);
    	});

    	const $$binding_groups = [[]];

    	function textarea_input_handler() {
    		content = this.value;
    		$$invalidate(0, content);
    	}

    	function input_change_handler() {
    		selectedTab = this.__value;
    		$$invalidate(1, selectedTab);
    	}

    	$$self.$capture_state = () => ({
    		ReliableTxtDocument: dist.ReliableTxtDocument,
    		WsvParser: dist.WsvParser,
    		content,
    		doc,
    		tabs,
    		selectedTab,
    		parserError,
    		getClass,
    		keydown
    	});

    	$$self.$inject_state = $$props => {
    		if ("content" in $$props) $$invalidate(0, content = $$props.content);
    		if ("doc" in $$props) $$invalidate(2, doc = $$props.doc);
    		if ("tabs" in $$props) $$invalidate(4, tabs = $$props.tabs);
    		if ("selectedTab" in $$props) $$invalidate(1, selectedTab = $$props.selectedTab);
    		if ("parserError" in $$props) $$invalidate(3, parserError = $$props.parserError);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*selectedTab, content*/ 3) {
    			 {
    				if (selectedTab === "WsvParser") {
    					try {
    						$$invalidate(2, doc = new dist.WsvParser().parseDocument(content));
    						$$invalidate(3, parserError = false);
    					} catch(e) {
    						$$invalidate(3, parserError = true);
    					}
    				} else {
    					try {
    						$$invalidate(2, doc = new dist.ReliableTxtDocument(content).getLines());
    						$$invalidate(3, parserError = false);
    					} catch(e) {
    						$$invalidate(3, parserError = true);
    					}
    				}
    			}
    		}
    	};

    	return [
    		content,
    		selectedTab,
    		doc,
    		parserError,
    		tabs,
    		getClass,
    		keydown,
    		textarea_input_handler,
    		input_change_handler,
    		$$binding_groups
    	];
    }

    class App extends SvelteElement {
    	constructor(options) {
    		super();

    		this.shadowRoot.innerHTML = `<style>:host{display:flex;background:var(--sml-tryit-bg);padding:var(--sml-tryit-padding);box-sizing:border-box}*{box-sizing:border-box;position:relative}.sml-tryit{display:flex;flex-direction:column;justify-content:stretch;align-items:flex-start;flex-wrap:wrap;gap:var(--sml-tryit-gap);flex:1}textarea{resize:none;text-align:left;color:var(--sml-tryit-textarea-color);background:var(--sml-tryit-textarea-bg);border:var(--sml-tryit-textarea-border);padding:var(--sml-tryit-textarea-padding);margin:var(--sml-tryit-textarea-margin);width:var(--sml-tryit-textarea-width);height:var(--sml-tryit-textarea-height);box-shadow:var(--sml-tryit-textarea-box-shadow);line-height:var(--sml-tryit-textarea-line-height)}textarea:focus{outline:none}textarea.parserError{background:var(--sml-tryit-textarea-error-bg);border:var(--sml-tryit-textarea-error-border);color:var(--sml-tryit-textarea-error-color)}textarea.parserError::after{content:'WsvParserException'
	}.tab-group{display:flex;justify-content:flex-start;align-items:center}.tab{background:var(--sml-tryit-tab-bg);padding:var(--sml-tryit-tab-padding);color:var(--sml-tryit-tab-color);border-bottom:var(--sml-tryit-tab-border-bottom)}.tab:hover{cursor:pointer;background:var(--sml-tryit-tab-hover-bg);color:var(--sml-tryit-tab-hover-color)}[type="radio"]{display:none}[type="radio"]:checked+.tab{background:var(--sml-tryit-tab-checked-bg);color:var(--sml-tryit-tab-checked-color)}.sml-tryit-output{overflow:auto;width:100%;max-width:100%;min-height:var(--sml-tryit-textarea-height);flex:1;border-top:var(--sml-tryit-output-border-top);background:var(--sml-tryit-output-bg);padding:var(--sml-tryit-output-padding);margin-top:var(--sml-tryit-output-margin-top)}table{display:block}td{text-align:left;border:var(--sml-tryit-td-border);color:var(--sml-tryit-td-color);padding:var(--sml-tryit-td-padding);background:var(--sml-tryit-td-bg);font-size:var(--sml-tryit-td-font-size);font-family:var(--sml-tryit-td-font-family)}td.empty{background:var(--sml-tryit-td-empty)}td.null{background:var(--sml-tryit-td-null)}</style>`;

    		init(
    			this,
    			{
    				target: this.shadowRoot,
    				props: attribute_to_object(this.attributes)
    			},
    			instance,
    			create_fragment,
    			safe_not_equal,
    			{}
    		);

    		if (options) {
    			if (options.target) {
    				insert_dev(options.target, this, options.anchor);
    			}
    		}
    	}
    }

    customElements.define("sml-tryit", App);

    return App;

}());
//# sourceMappingURL=sml-tryit.min.js.map
